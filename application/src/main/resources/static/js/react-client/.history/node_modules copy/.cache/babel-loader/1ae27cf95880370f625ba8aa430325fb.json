{"ast":null,"code":"// //  import \"@reach/combobox/styles.css\";\n// // import {\n// //     Combobox,\n// //     ComboboxInput,\n// //     ComboboxList,\n// //     ComboboxOption,\n// //     ComboboxPopover,\n// // } from \"@reach/combobox\";\n// import \"@reach/combobox/styles.css\";\n// import {\n//     Combobox,\n//     ComboboxInput,\n//     ComboboxList,\n//     ComboboxOption,\n//     ComboboxPopover,\n// } from \"@reach/combobox\";\n// import {\n//     GoogleMap,\n//     InfoWindow,\n//     Marker,\n//      useLoadScript,\n// } from \"@react-google-maps/api\";\n// // import usePlacesAutocomplete, {\n// //     getGeocode,\n// //     getLatLng,\n// // } from \"use-places-autocomplete\";\n// import React from \"react\";\n// import compass from '../../assets/logo/1f9ed.png';\n// // import { formatRelative } from \"date-fns\";\n//     useLoadScript,\n// } from \"@react-google-maps/api\";\n// import usePlacesAutocomplete, {\n//     getGeocode,\n//     getLatLng,\n// } from \"use-places-autocomplete\";\n// import React from \"react\";\n// import compass from '../../assets/logo/1f9ed.png';\n// import { formatRelative } from \"date-fns\";\n// import mapStyles from \"../../pages/find-food-screen/style.module.scss\"\n// import style from './style.module.scss';\n// const libraries = [\"places\"];\n// const mapContainerStyle ={\n//     width: \"50vw\",\n//     height: \"50vh\",\n// };\n// const center = {\n//     lat:37.090240,\n//     lng: -95.712891,\n// };\n// const options = {\n//     styles: mapStyles,\n//     disableDefaultUI: true,\n//     zoomControl: true,\n// }\n// export default function App() {\n//     const { isLoaded, loadError } = useLoadScript({\n//       googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n//       libraries,\n//     });\n//     const [markers, setMarkers]  = React.useState([]);\n//     const [selected, setSelected] = React.useState(null);\n//     const onMapClick = React.useCallback((e) => {\n//         setMarkers((current) => [\n//           ...current,\n//           {\n//             lat: e.latLng.lat(),\n//             lng: e.latLng.lng(),\n//             time: new Date(),\n//           },\n//         ]);\n//       }, []);\n//       const mapRef = React.useRef();\n//       const onMapLoad = React.useCallback((map) => {\n//         mapRef.current = map;\n//       }, []);\n//       const panTo = React.useCallback(({ lat, lng }) => {\n//         mapRef.current.panTo({ lat, lng });\n//         mapRef.current.setZoom(14);\n//       }, []);\n//       if (loadError) return \"Error\";\n//       if (!isLoaded) return \"Loading...\";\n//    return (\n//    <div>\n//     <h1>Community{\" \"}\n//     <span role=\"img\" aria-label=\"chef\">\n//         üßë‚Äçüç≥\n//     </span>\n//     </h1>\n//     <Locate panTo={panTo} />\n//       <Search panTo={panTo} />\n//       <GoogleMap\n//         id=\"map\"\n//         mapContainerStyle={mapContainerStyle}\n//         zoom={8}\n//         center={center}\n//         options={options}\n//         onClick={onMapClick}\n//         onLoad={onMapLoad}\n//     >\n//         {markers.map((marker) => (\n//           <Marker\n//             key={`${marker.lat}-${marker.lng}`}\n//             position={{ lat: marker.lat, lng: marker.lng }}\n//             onClick={() => {\n//               setSelected(marker);\n//             }}\n//             icon={{\n//               url: `../../assets/logo/CardItem.jpeg`,\n//               origin: new window.google.maps.Point(0, 0),\n//               anchor: new window.google.maps.Point(15, 15),\n//               scaledSize: new window.google.maps.Size(30, 30),\n//             }}\n//           />\n//         ))}\n// {selected ? (\n//           <InfoWindow\n//             position={{ lat: selected.lat, lng: selected.lng }}\n//             onCloseClick={() => {\n//               setSelected(null);\n//             }}\n//           >\n//             <div>\n//               <h2>\n//                 <span role=\"img\" aria-label=\"chef\">\n//                   üßë‚Äçüç≥\n//                   </span>{\" \"}\n//                 Alert\n//               </h2>\n//               {/* <p>Spotted {formatRelative(selected.time, new Date())}</p> */}\n//               <p>Spotted {formatRelative(selected.time, new Date())}</p>\n//             </div>\n//           </InfoWindow>\n//         ) : null}\n//       </GoogleMap>\n//     </div>\n//   );\n// }\n// function Locate({ panTo }) {\n//     return (\n//       <button\n//         className=\"locate\"\n//         onClick={() => {\n//           navigator.geolocation.getCurrentPosition(\n//             (position) => {\n//               panTo({\n//                 lat: position.coords.latitude,\n//                 lng: position.coords.longitude,\n//               });\n//             },\n//             () => null\n//           );\n//         }}\n//       >\n//         <img className={style.compassimg} src={compass} alt=\"compass\"  />\n//       </button>\n//     );\n//   }\n// function Search({ panTo }) {\n//     const {\n//       ready,\n//       value,\n//       suggestions: { status, data },\n//       setValue,\n//       clearSuggestions,\n//     } = usePlacesAutocomplete({\n//       requestOptions: {\n//         location: { lat: () => 43.6532, lng: () => -79.3832 },\n//         radius: 100 * 1000,\n//       },\n//     });\n//     const handleInput = (e) => {\n//         setValue(e.target.value);\n//       };\n//       const handleSelect = async (address) => {\n//         setValue(address, false);\n//         clearSuggestions();\n//         try {\n//           const results = await getGeocode({ address });\n//           const { lat, lng } = await getLatLng(results[0]);\n//           panTo({ lat, lng });\n//         } catch (error) {\n//           console.log(\"üò± Error: \", error);\n//         }\n//       };\n//       return (\n//         <div className=\"search\">\n//           <Combobox onSelect={handleSelect}>\n//             <ComboboxInput\n//               value={value}\n//               onChange={handleInput}\n//               disabled={!ready}\n//               placeholder=\"Search your location\"\n//             />\n//             <ComboboxPopover>\n//               <ComboboxList>\n//                 {status === \"OK\" &&\n//                   data.map(({ id, description }) => (\n//                     <ComboboxOption key={id} value={description} />\n//                   ))}\n//               </ComboboxList>\n//             </ComboboxPopover>\n//           </Combobox>\n//         </div>\n//       );\n//     }","map":{"version":3,"names":[],"sources":["C:/Users/farid/wcci-pt-april-2022/githubCodes/team3community/final-project-team-3/application/src/main/resources/static/js/react-client/src/pages/find-food-screen/index.js"],"sourcesContent":["\r\n// //  import \"@reach/combobox/styles.css\";\r\n\r\n// // import {\r\n// //     Combobox,\r\n// //     ComboboxInput,\r\n// //     ComboboxList,\r\n// //     ComboboxOption,\r\n// //     ComboboxPopover,\r\n// // } from \"@reach/combobox\";\r\n\r\n// import \"@reach/combobox/styles.css\";\r\n\r\n// import {\r\n//     Combobox,\r\n//     ComboboxInput,\r\n//     ComboboxList,\r\n//     ComboboxOption,\r\n//     ComboboxPopover,\r\n// } from \"@reach/combobox\";\r\n\r\n// import {\r\n//     GoogleMap,\r\n//     InfoWindow,\r\n//     Marker,\r\n\r\n//      useLoadScript,\r\n// } from \"@react-google-maps/api\";\r\n// // import usePlacesAutocomplete, {\r\n// //     getGeocode,\r\n// //     getLatLng,\r\n// // } from \"use-places-autocomplete\";\r\n\r\n// import React from \"react\";\r\n// import compass from '../../assets/logo/1f9ed.png';\r\n// // import { formatRelative } from \"date-fns\";\r\n\r\n//     useLoadScript,\r\n// } from \"@react-google-maps/api\";\r\n// import usePlacesAutocomplete, {\r\n//     getGeocode,\r\n//     getLatLng,\r\n// } from \"use-places-autocomplete\";\r\n\r\n// import React from \"react\";\r\n// import compass from '../../assets/logo/1f9ed.png';\r\n// import { formatRelative } from \"date-fns\";\r\n\r\n// import mapStyles from \"../../pages/find-food-screen/style.module.scss\"\r\n// import style from './style.module.scss';\r\n\r\n// const libraries = [\"places\"];\r\n// const mapContainerStyle ={\r\n//     width: \"50vw\",\r\n//     height: \"50vh\",\r\n// };\r\n// const center = {\r\n//     lat:37.090240,\r\n//     lng: -95.712891,\r\n// };\r\n// const options = {\r\n//     styles: mapStyles,\r\n//     disableDefaultUI: true,\r\n//     zoomControl: true,\r\n// }\r\n\r\n// export default function App() {\r\n//     const { isLoaded, loadError } = useLoadScript({\r\n//       googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n//       libraries,\r\n//     });\r\n    \r\n//     const [markers, setMarkers]  = React.useState([]);\r\n    \r\n//     const [selected, setSelected] = React.useState(null);\r\n\r\n//     const onMapClick = React.useCallback((e) => {\r\n//         setMarkers((current) => [\r\n//           ...current,\r\n//           {\r\n//             lat: e.latLng.lat(),\r\n//             lng: e.latLng.lng(),\r\n//             time: new Date(),\r\n//           },\r\n//         ]);\r\n//       }, []);\r\n    \r\n\r\n//       const mapRef = React.useRef();\r\n//       const onMapLoad = React.useCallback((map) => {\r\n//         mapRef.current = map;\r\n//       }, []);\r\n    \r\n//       const panTo = React.useCallback(({ lat, lng }) => {\r\n//         mapRef.current.panTo({ lat, lng });\r\n//         mapRef.current.setZoom(14);\r\n//       }, []);\r\n    \r\n//       if (loadError) return \"Error\";\r\n//       if (!isLoaded) return \"Loading...\";\r\n\r\n\r\n//    return (\r\n//    <div>\r\n//     <h1>Community{\" \"}\r\n//     <span role=\"img\" aria-label=\"chef\">\r\n//         üßë‚Äçüç≥\r\n//     </span>\r\n//     </h1>\r\n        \r\n        \r\n\r\n//     <Locate panTo={panTo} />\r\n//       <Search panTo={panTo} />\r\n\r\n//       <GoogleMap\r\n//         id=\"map\"\r\n//         mapContainerStyle={mapContainerStyle}\r\n//         zoom={8}\r\n//         center={center}\r\n//         options={options}\r\n//         onClick={onMapClick}\r\n//         onLoad={onMapLoad}\r\n//     >\r\n//         {markers.map((marker) => (\r\n//           <Marker\r\n//             key={`${marker.lat}-${marker.lng}`}\r\n//             position={{ lat: marker.lat, lng: marker.lng }}\r\n//             onClick={() => {\r\n//               setSelected(marker);\r\n//             }}\r\n//             icon={{\r\n//               url: `../../assets/logo/CardItem.jpeg`,\r\n//               origin: new window.google.maps.Point(0, 0),\r\n//               anchor: new window.google.maps.Point(15, 15),\r\n//               scaledSize: new window.google.maps.Size(30, 30),\r\n//             }}\r\n//           />\r\n//         ))}\r\n        \r\n// {selected ? (\r\n//           <InfoWindow\r\n//             position={{ lat: selected.lat, lng: selected.lng }}\r\n//             onCloseClick={() => {\r\n//               setSelected(null);\r\n//             }}\r\n//           >\r\n//             <div>\r\n//               <h2>\r\n//                 <span role=\"img\" aria-label=\"chef\">\r\n//                   üßë‚Äçüç≥\r\n//                   </span>{\" \"}\r\n//                 Alert\r\n//               </h2>\r\n\r\n//               {/* <p>Spotted {formatRelative(selected.time, new Date())}</p> */}\r\n\r\n//               <p>Spotted {formatRelative(selected.time, new Date())}</p>\r\n\r\n//             </div>\r\n//           </InfoWindow>\r\n//         ) : null}\r\n//       </GoogleMap>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// function Locate({ panTo }) {\r\n//     return (\r\n//       <button\r\n//         className=\"locate\"\r\n//         onClick={() => {\r\n//           navigator.geolocation.getCurrentPosition(\r\n//             (position) => {\r\n//               panTo({\r\n//                 lat: position.coords.latitude,\r\n//                 lng: position.coords.longitude,\r\n//               });\r\n//             },\r\n//             () => null\r\n//           );\r\n//         }}\r\n//       >\r\n//         <img className={style.compassimg} src={compass} alt=\"compass\"  />\r\n//       </button>\r\n//     );\r\n//   }\r\n\r\n\r\n// function Search({ panTo }) {\r\n//     const {\r\n//       ready,\r\n//       value,\r\n//       suggestions: { status, data },\r\n//       setValue,\r\n//       clearSuggestions,\r\n//     } = usePlacesAutocomplete({\r\n//       requestOptions: {\r\n//         location: { lat: () => 43.6532, lng: () => -79.3832 },\r\n//         radius: 100 * 1000,\r\n//       },\r\n//     });\r\n\r\n//     const handleInput = (e) => {\r\n//         setValue(e.target.value);\r\n//       };\r\n    \r\n//       const handleSelect = async (address) => {\r\n//         setValue(address, false);\r\n//         clearSuggestions();\r\n    \r\n//         try {\r\n//           const results = await getGeocode({ address });\r\n//           const { lat, lng } = await getLatLng(results[0]);\r\n//           panTo({ lat, lng });\r\n//         } catch (error) {\r\n//           console.log(\"üò± Error: \", error);\r\n//         }\r\n//       };\r\n\r\n//       return (\r\n//         <div className=\"search\">\r\n//           <Combobox onSelect={handleSelect}>\r\n//             <ComboboxInput\r\n//               value={value}\r\n//               onChange={handleInput}\r\n//               disabled={!ready}\r\n//               placeholder=\"Search your location\"\r\n//             />\r\n//             <ComboboxPopover>\r\n//               <ComboboxList>\r\n//                 {status === \"OK\" &&\r\n//                   data.map(({ id, description }) => (\r\n//                     <ComboboxOption key={id} value={description} />\r\n//                   ))}\r\n//               </ComboboxList>\r\n//             </ComboboxPopover>\r\n//           </Combobox>\r\n//         </div>\r\n//       );\r\n//     }\r\n"],"mappings},"metadata":{},"sourceType":"module"}